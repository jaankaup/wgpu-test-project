#version 450

#define LOCAL_X_DIM 8 
#define LOCAL_Y_DIM 8

layout(local_size_x = LOCAL_X_DIM, local_size_y = LOCAL_Y_DIM) in;

//struct Vertex {
//    vec4 v;
//    vec4 n;
//};
//
struct Ray {
    vec3 origin;
    vec3 direction;
    float rMin;
    float rMax;
    int maxStep;
    float epsilon;
};

layout(set = 0, binding = 0) uniform RayCamera {
    vec4 position;		
    vec4 view;			
    vec4 up;			
    vec4 fov;		
    float apertureRadius;
    float focalDistance; // NOT WORKING!
} camera;
//
//// TODO: later
layout(set = 1, binding = 0) uniform texture2D t_diffuse;
layout(set = 1, binding = 1) uniform sampler s_diffuse;

layout(set = 2, binding = 0) buffer Prkl {
    uint[] frame_output;
};

layout(set = 3, binding = 0) buffer DebugOut {
    vec4[] debug_output;
};


// Noise functions copied from https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83.

//	<https://www.shadertoy.com/view/4dS3Wd>
//	By Morgan McGuire @morgan3d, http://graphicscodex.com
//
float hash(float n) { return fract(sin(n) * 1e4); }
float hash(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }

float noise(float x) {
	float i = floor(x);
	float f = fract(x);
	float u = f * f * (3.0 - 2.0 * f);
	return mix(hash(i), hash(i + 1.0), u);
}

float noise(vec2 x) {
	vec2 i = floor(x);
	vec2 f = fract(x);

	// Four corners in 2D of a tile
	float a = hash(i);
	float b = hash(i + vec2(1.0, 0.0));
	float c = hash(i + vec2(0.0, 1.0));
	float d = hash(i + vec2(1.0, 1.0));

	// Simple 2D lerp using smoothstep envelope between the values.
	// return vec3(mix(mix(a, b, smoothstep(0.0, 1.0, f.x)),
	//			mix(c, d, smoothstep(0.0, 1.0, f.x)),
	//			smoothstep(0.0, 1.0, f.y)));

	// Same code, with the clamps in smoothstep and common subexpressions
	// optimized away.
	vec2 u = f * f * (3.0 - 2.0 * f);
	return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
}

// This one has non-ideal tiling properties that I'm still tuning
float noise(vec3 x) {
	const vec3 step = vec3(110, 241, 171);

	vec3 i = floor(x);
	vec3 f = fract(x);

	// For performance, compute the base input to a 1D hash from the integer part of the argument and the
	// incremental change to the 1D based on the 3D -> 1D wrapping
    float n = dot(i, step);

	vec3 u = f * f * (3.0 - 2.0 * f);
	return mix(mix(mix( hash(n + dot(step, vec3(0, 0, 0))), hash(n + dot(step, vec3(1, 0, 0))), u.x),
                   mix( hash(n + dot(step, vec3(0, 1, 0))), hash(n + dot(step, vec3(1, 1, 0))), u.x), u.y),
               mix(mix( hash(n + dot(step, vec3(0, 0, 1))), hash(n + dot(step, vec3(1, 0, 1))), u.x),
                   mix( hash(n + dot(step, vec3(0, 1, 1))), hash(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);
}

#define NUM_OCTAVES 5

float fbm(float x) {
	float v = 0.0;
	float a = 0.5;
	float shift = float(100);
	for (int i = 0; i < NUM_OCTAVES; ++i) {
		v += a * noise(x);
		x = x * 2.0 + shift;
		a *= 0.5;
	}
	return v;
}

float fbm(vec2 x) {
	float v = 0.0;
	float a = 0.5;
	vec2 shift = vec2(100);
	// Rotate to reduce axial bias
    mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.50));
	for (int i = 0; i < NUM_OCTAVES; ++i) {
		v += a * noise(x);
		x = rot * x * 2.0 + shift;
		a *= 0.5;
	}
	return v;
}


float fbm(vec3 x) {
	float v = 0.0;
	float a = 0.5;
	vec3 shift = vec3(100);
	for (int i = 0; i < NUM_OCTAVES; ++i) {
		v += a * noise(x);
		x = x * 2.0 + shift;
		a *= 0.5;
	}
	return v;
}

float maasto(vec3 f_pos) {
    float n = noise(vec3(0.02*f_pos.x, 0.02*f_pos.y, 0.02*f_pos.z));
    float n2 = noise(vec3(0.08*f_pos.y, 0.08*f_pos.z, 0.08*f_pos.x));
    return f_pos.y - 15.5 + 8 * n + 100 * n2;
}

// float calculate_density(vec3 v)
// {
//     //float noise = fbm(v);
//     //float noise = noise(0.1 * v + vec3(0.0,0.01,0.043));
//     //return v.y + abs(6*fbm(v*0.4)); // + 10.0 * noise + 14.0 * noise2;
//     //return v.y - 1.5 + sin(0.03*v.x) * 5 * noise;
//     return v.y - 1.5 + 2 * sin(v.x) + cos(0.5 * v.y);
// }

vec3 getPoint(float distance, in Ray ray) {
    return ray.origin + distance * ray.direction;
}

void main() {	

  //uint pos_x = gl_GlobalInvocationID.x;
  //uint pos_y = gl_GlobalInvocationID.y;
  //uint pos_z = gl_GlobalInvocationID.z;

  float x_coord = float(gl_GlobalInvocationID.x);
  float y_coord = float(gl_GlobalInvocationID.y);
  float global_x_dim = float(gl_NumWorkGroups.x * LOCAL_X_DIM);
  float global_y_dim = float(gl_NumWorkGroups.y * LOCAL_Y_DIM);

  vec3 right = normalize(cross(camera.view.xyz,camera.up.xyz));  
  //vec3 right = normalize(cross(camera.view,vec3(0.0,1.0,0.0)));  
  vec3 y = normalize(cross(camera.view.xyz, right));

  float d = camera.focalDistance;  
  
  vec3 u = (d * tan(camera.fov.x*0.5)) * right; 
  vec3 v = (d * tan(camera.fov.y*0.5)) * y;

  float alpha = 2.0 * (x_coord + 0.5f) / global_x_dim - 1.0;
  float beta  = 1.0 - 2.0f * (y_coord + 0.5f) / global_y_dim;

  vec3 point_on_plane = alpha * u + beta * v;

  Ray ray;
  ray.origin = point_on_plane + camera.position.xyz; //(float3){0.0f, 0.0f, 1.0f}; // + cam->view*d; //point_on_plane; //-d*cam->view; // point_on_plane; // cam->position; 
  ray.direction = normalize(point_on_plane + d*camera.view.xyz);

  vec3 intersection_point = camera.position.xyz;
  vec3 accum_color = vec3(0.0f, 0.0f, 0.0f);

  const float step_size = 0.2f;
  float depth = 0.0f;
  const float max_depth = 100.0f;
  //float3 light_direction = (float3){0.0,1.0,0.0};
  float last_value = maasto(ray.origin);

  for (int i=0 ; i<600 ; i++)
  {
    vec3 p = getPoint(depth, ray);
    float value_maasto = maasto(p);

    //if (p.y > 80.0 || p.y < -100.0) break;

    if (value_maasto < 0.0f) {
      //depth -= step_size;
      //p = getPoint(temp_depth, ray);
      //value_maasto = maasto(p);
      intersection_point = p;
      //float temp_depth = depth - step_size;
      //for (int k=0; k<16 ; k++) {
      //  temp_depth = depth + float(k) * (step_size / 15.0);
      //  p = getPoint(temp_depth, ray);
      //  value_maasto = maasto(p);
      //  if (value_maasto < 0.0f) { intersection_point = p; depth = temp_depth; break; }
      //} // for
      break;
    } // if

    float diff = value_maasto - last_value;
    depth += step_size;
    //depth += max(step_size, step_size + 0.5f * diff);
    last_value = value_maasto;

    //if (depth > max_depth) break;
  } // for

  // vec2 coord1 = intersection_point.xy;
  // vec2 coord2 = intersection_point.zy;
  // vec2 coord3 = intersection_point.zy;

  // vec4 final_color1 = texture(sampler2D(t_diffuse, s_diffuse), coord1 * 0.051);
  // vec4 final_color2 = texture(sampler2D(t_diffuse, s_diffuse), coord2 * 0.051);
  // vec4 final_color3 = texture(sampler2D(t_diffuse, s_diffuse), coord3 * 0.051);

  // vec4 final_color = mix(mix(final_color1, final_color2, 0.5), final_color3, 0.3);

  //vec4 final_color = texture(sampler2D(t_diffuse, s_diffuse), camera.view.xy) ; 
//  vec2 coord1 = intersection_point.xy * 0.05; // normal xy mapping to 2d texture.
  float pah = noise(0.05*intersection_point.xy);
  float pah2 = noise(vec2(2.55) + 0.05*intersection_point.xz);
  float pah3 = noise(vec2(5.0) + 0.05*intersection_point.yz);
//  float pah3 = noise(0.02*(intersection_point + vec3(8.0,8.0,8.0));
//  float offset1 = 0.25*noise(intersection_point.x) + 0.25;
//  float offset2 = 0.25*noise(intersection_point.y) + 0.25;
//  float offset3 = 0.25*noise(intersection_point.z) + 0.25;
//  //vec2 coord3 = vec2(intersection_point.z * 0.05, -intersection_point.z * 0.05);
//  vec4 final_color = texture(sampler2D(t_diffuse, s_diffuse), 0.2*(intersection_point.xz - intersection_point.y * vec2(0.1,0.1)));
//  vec4 color2 = texture(sampler2D(t_diffuse, s_diffuse), vec2(offset1,offset3));
//  //vec4 color2 = texture(sampler2D(t_diffuse, s_diffuse), vec2(offset1, offset3));
//  //vec4 final_color1 = texture(sampler2D(t_diffuse, s_diffuse), 0.01*intersection_point.xz);
//  //vec4 final_color2 = texture(sampler2D(t_diffuse, s_diffuse), 0.05*intersection_point.xy);
//
//  //vec4 final_color = vec4(offset1, offset2, offset3, 1.0);

  vec4 final_color = vec4(pah,pah2,pah3,1.0);

  //if (length(intersection_point - camera.position) > 500.0) final_color = vec4(0.0,0.0,0.0,1.0);
  //vec4 final_color = vec4(abs(camera.view.x), abs(camera.view.y), abs(camera.view.z), 1.0); //texture(sampler2D(t_diffuse, s_diffuse), intersection_point.xy) ;

  // WORKS!
  //uint converted_color_rgba = ((uint(1.0 * 255) & 0xffff) << 24) | // alpha
  //                            ((uint(0.0 * 255) & 0xffff) << 16) | // blue
  //                            ((uint(0.0 * 255) & 0xffff) << 8 ) | // green
  //                            (uint(1.0 * 255) & 0xffff);          // red 

  uint converted_color_rgba = ((uint(final_color.w * 255) & 0xffff) << 24) | // alpha
                              ((uint(final_color.z * 255) & 0xffff) << 16) | // blue
                              ((uint(final_color.y * 255) & 0xffff) << 8 ) | // green
                              (uint(final_color.x * 255) & 0xffff);          // red 

  //  //const uint save_position = gl_GlobalInvocationID.y * gl_WorkGroupSize.x + gl_GlobalInvocationID.x;  
  //screen.frame_output[gl_LocalInvocationIndex] = converted_color_rgba;

  // TOIMIII!!!
  //uint joo = 0 |Â ((gl_GlobalInvocationID.x & 0xffff) << 16) | (gl_GlobalInvocationID.y & 0xffff);  
  frame_output[gl_GlobalInvocationID.x + gl_NumWorkGroups.x * gl_WorkGroupSize.x * gl_GlobalInvocationID.y] = converted_color_rgba;

  //frame_output[gl_GlobalInvocationID.x + gl_NumWorkGroups.x *
  //  gl_WorkGroupSize.x * gl_GlobalInvocationID.y] = uint(depth);

  debug_output[gl_GlobalInvocationID.x + gl_NumWorkGroups.x *
  gl_WorkGroupSize.x * gl_GlobalInvocationID.y] = vec4(camera.apertureRadius,
  camera.focalDistance, 12.0, 13.0 );

//  vec3 point_on_plane = alpha * u + beta * v;

  // indeksointi ok
  //uint joo = 0 | ((gl_GlobalInvocationID.x & 0xffff) << 16) | (gl_GlobalInvocationID.y & 0xffff);  
  //debug_output[gl_GlobalInvocationID.x + gl_NumWorkGroups.x * gl_WorkGroupSize.x * gl_GlobalInvocationID.y] =
  //      uvec4(gl_GlobalInvocationID.x + gl_NumWorkGroups.x * gl_WorkGroupSize.x
  //      * gl_GlobalInvocationID.y, 
  //            gl_GlobalInvocationID.x,             
  //            gl_GlobalInvocationID.y,
  //            666);

  // THiS WORKS 1-d!
  //frame_output[gl_GlobalInvocationID.x] =  gl_GlobalInvocationID.x; //converted_color_rgba;  

}
