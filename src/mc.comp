#version 450

#define CUBES_PER_DIMENSION 64 
#define INTERPOLATE

layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

// +--+--+--+--+--+--+--+--+
// |v0|v1|v2|v3|v4|v5|v6|v7|
// +--+--+--+--+--+--+--+--+

struct Vertex {
    vec4 v;
    vec4 n;
};

layout(set = 0, binding = 0) uniform McParams {
    vec4 base_position;
    float isovalue;
    float cube_length;
};

layout(set = 0, binding = 1) buffer McCounter {
    uint counter;
};

layout(set = 0, binding = 2) writeonly buffer McOutput {
    Vertex mc_out[];
};

struct Cube {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 v3;
    vec4 v4;
    vec4 v5;
    vec4 v6;
    vec4 v7;

    vec4 n0;
    vec4 n1;
    vec4 n2;
    vec4 n3;
    vec4 n4;
    vec4 n5;
    vec4 n6;
    vec4 n7;
};

const uint[1280] triTable = {
    16777215 ,16777215 ,16777215 ,16777215 ,16777215 ,
    2051 ,16777215 ,16777215 ,16777215 ,16777215 ,
    265 ,16777215 ,16777215 ,16777215 ,16777215 ,
    67587 ,591873 ,16777215 ,16777215 ,16777215 ,
    66058 ,16777215 ,16777215 ,16777215 ,16777215 ,
    2051 ,66058 ,16777215 ,16777215 ,16777215 ,
    590346 ,521 ,16777215 ,16777215 ,16777215 ,
    133123 ,133640 ,657672 ,16777215 ,16777215 ,
    199426 ,16777215 ,16777215 ,16777215 ,16777215 ,
    2818 ,527104 ,16777215 ,16777215 ,16777215 ,
    67840 ,131851 ,16777215 ,16777215 ,16777215 ,
    68354 ,67851 ,591883 ,16777215 ,16777215 ,
    199169 ,723459 ,16777215 ,16777215 ,16777215 ,
    2561 ,2058 ,527114 ,16777215 ,16777215 ,
    198912 ,199433 ,723465 ,16777215 ,16777215 ,
    591882 ,657419 ,16777215 ,16777215 ,16777215 ,
    263944 ,16777215 ,16777215 ,16777215 ,16777215 ,
    262912 ,459524 ,16777215 ,16777215 ,16777215 ,
    265 ,525319 ,16777215 ,16777215 ,16777215 ,
    262409 ,263937 ,459521 ,16777215 ,16777215 ,
    66058 ,525319 ,16777215 ,16777215 ,16777215 ,
    197639 ,196612 ,66058 ,16777215 ,16777215 ,
    590346 ,589826 ,525319 ,16777215 ,16777215 ,
    133641 ,133383 ,132867 ,461060 ,16777215 ,
    525319 ,199426 ,16777215 ,16777215 ,16777215 ,
    721927 ,721412 ,131076 ,16777215 ,16777215 ,
    589825 ,525319 ,131851 ,16777215 ,16777215 ,
    263947 ,590859 ,592642 ,590337 ,16777215 ,
    199169 ,199434 ,460804 ,16777215 ,16777215 ,
    68362 ,66571 ,65540 ,461572 ,16777215 ,
    263944 ,589835 ,592650 ,720899 ,16777215 ,
    263947 ,264969 ,592650 ,16777215 ,16777215 ,
    591108 ,16777215 ,16777215 ,16777215 ,16777215 ,
    591108 ,2051 ,16777215 ,16777215 ,16777215 ,
    1284 ,66816 ,16777215 ,16777215 ,16777215 ,
    525572 ,525061 ,196869 ,16777215 ,16777215 ,
    66058 ,591108 ,16777215 ,16777215 ,16777215 ,
    196616 ,66058 ,264453 ,16777215 ,16777215 ,
    328202 ,328706 ,262146 ,16777215 ,16777215 ,
    133637 ,197125 ,197892 ,197640 ,16777215 ,
    591108 ,131851 ,16777215 ,16777215 ,16777215 ,
    2818 ,2059 ,264453 ,16777215 ,16777215 ,
    1284 ,261 ,131851 ,16777215 ,16777215 ,
    131333 ,132360 ,133131 ,264197 ,16777215 ,
    656139 ,655619 ,591108 ,16777215 ,16777215 ,
    264453 ,2049 ,526849 ,527114 ,16777215 ,
    328704 ,327691 ,330506 ,720899 ,16777215 ,
    328712 ,329738 ,657419 ,16777215 ,16777215 ,
    591624 ,329481 ,16777215 ,16777215 ,16777215 ,
    590592 ,591107 ,329475 ,16777215 ,16777215 ,
    1800 ,263 ,66823 ,16777215 ,16777215 ,
    66819 ,197895 ,16777215 ,16777215 ,16777215 ,
    591624 ,591111 ,655618 ,16777215 ,16777215 ,
    655618 ,591104 ,328448 ,329475 ,16777215 ,
    524290 ,524805 ,525575 ,656642 ,16777215 ,
    133637 ,132355 ,197895 ,16777215 ,16777215 ,
    461061 ,460809 ,199426 ,16777215 ,16777215 ,
    591111 ,591618 ,590336 ,132875 ,16777215 ,
    131851 ,264 ,67336 ,66823 ,16777215 ,
    721409 ,721159 ,459013 ,16777215 ,16777215 ,
    591112 ,525575 ,655619 ,656139 ,16777215 ,
    329472 ,327689 ,461568 ,65546 ,723456 ,
    723456 ,720899 ,656640 ,524295 ,329472 ,
    723461 ,461573 ,16777215 ,16777215 ,16777215 ,
    656901 ,16777215 ,16777215 ,16777215 ,16777215 ,
    2051 ,330246 ,16777215 ,16777215 ,16777215 ,
    589825 ,330246 ,16777215 ,16777215 ,16777215 ,
    67587 ,67848 ,330246 ,16777215 ,16777215 ,
    67077 ,132609 ,16777215 ,16777215 ,16777215 ,
    67077 ,66054 ,196616 ,16777215 ,16777215 ,
    591365 ,589830 ,518 ,16777215 ,16777215 ,
    329992 ,329730 ,328198 ,197128 ,16777215 ,
    131851 ,656901 ,16777215 ,16777215 ,16777215 ,
    720904 ,721408 ,656901 ,16777215 ,16777215 ,
    265 ,131851 ,330246 ,16777215 ,16777215 ,
    330246 ,67842 ,592642 ,591883 ,16777215 ,
    393995 ,394499 ,327939 ,16777215 ,16777215 ,
    2059 ,2821 ,1281 ,330502 ,16777215 ,
    199430 ,774 ,1541 ,1289 ,16777215 ,
    394505 ,395531 ,723208 ,16777215 ,16777215 ,
    330246 ,263944 ,16777215 ,16777215 ,16777215 ,
    262912 ,263939 ,394506 ,16777215 ,16777215 ,
    67840 ,330246 ,525319 ,16777215 ,16777215 ,
    656901 ,67847 ,67331 ,461060 ,16777215 ,
    393474 ,394497 ,263944 ,16777215 ,16777215 ,
    66053 ,328198 ,196612 ,197639 ,16777215 ,
    525319 ,589829 ,1541 ,518 ,16777215 ,
    459529 ,461060 ,197129 ,329990 ,132617 ,
    199426 ,460804 ,656901 ,16777215 ,16777215 ,
    330246 ,263938 ,262656 ,132875 ,16777215 ,
    265 ,263944 ,131851 ,330246 ,16777215 ,
    590337 ,592642 ,590859 ,461572 ,330246 ,
    525319 ,199429 ,197889 ,330502 ,16777215 ,
    327947 ,330502 ,65547 ,461572 ,1035 ,
    1289 ,1541 ,774 ,722435 ,525319 ,
    394505 ,395531 ,263945 ,461577 ,16777215 ,
    656393 ,394250 ,16777215 ,16777215 ,16777215 ,
    264710 ,264458 ,2051 ,16777215 ,16777215 ,
    655361 ,656896 ,394240 ,16777215 ,16777215 ,
    525057 ,524550 ,525828 ,393482 ,16777215 ,
    66569 ,66052 ,132612 ,16777215 ,16777215 ,
    196616 ,66057 ,132105 ,132612 ,16777215 ,
    516 ,262662 ,16777215 ,16777215 ,16777215 ,
    525058 ,524804 ,262662 ,16777215 ,16777215 ,
    656393 ,656900 ,721411 ,16777215 ,16777215 ,
    2050 ,133131 ,264458 ,264710 ,16777215 ,
    199426 ,262 ,1540 ,393482 ,16777215 ,
    394241 ,393482 ,264193 ,131339 ,527105 ,
    591364 ,590598 ,590083 ,722435 ,16777215 ,
    527105 ,524544 ,722433 ,590084 ,394241 ,
    199430 ,198144 ,1540 ,16777215 ,16777215 ,
    394248 ,722440 ,16777215 ,16777215 ,16777215 ,
    461318 ,460810 ,526602 ,16777215 ,16777215 ,
    1795 ,2567 ,2314 ,395018 ,16777215 ,
    656903 ,68103 ,67336 ,67584 ,16777215 ,
    656903 ,657153 ,67331 ,16777215 ,16777215 ,
    66054 ,67080 ,67593 ,525831 ,16777215 ,
    132617 ,133377 ,395017 ,2307 ,459529 ,
    460800 ,458758 ,393218 ,16777215 ,16777215 ,
    459522 ,395010 ,16777215 ,16777215 ,16777215 ,
    131851 ,656904 ,657417 ,525831 ,16777215 ,
    131079 ,132875 ,2311 ,395018 ,592391 ,
    67584 ,67336 ,68103 ,395018 ,131851 ,
    721409 ,721159 ,656897 ,395009 ,16777215 ,
    526598 ,525831 ,590086 ,722435 ,66310 ,
    2305 ,722439 ,16777215 ,16777215 ,16777215 ,
    460800 ,458758 ,199424 ,722432 ,16777215 ,
    461574 ,16777215 ,16777215 ,16777215 ,16777215 ,
    460299 ,16777215 ,16777215 ,16777215 ,16777215 ,
    196616 ,722694 ,16777215 ,16777215 ,16777215 ,
    265 ,722694 ,16777215 ,16777215 ,16777215 ,
    524553 ,525057 ,722694 ,16777215 ,16777215 ,
    655618 ,396039 ,16777215 ,16777215 ,16777215 ,
    66058 ,196616 ,396039 ,16777215 ,16777215 ,
    133376 ,133641 ,396039 ,16777215 ,16777215 ,
    396039 ,133635 ,657411 ,657672 ,16777215 ,
    459267 ,393735 ,16777215 ,16777215 ,16777215 ,
    458760 ,460288 ,393728 ,16777215 ,16777215 ,
    132870 ,131847 ,265 ,16777215 ,16777215 ,
    67074 ,67590 ,67848 ,526086 ,16777215 ,
    657158 ,655623 ,66311 ,16777215 ,16777215 ,
    657158 ,67338 ,67591 ,65544 ,16777215 ,
    775 ,1802 ,2569 ,395783 ,16777215 ,
    460298 ,461320 ,526857 ,16777215 ,16777215 ,
    395268 ,722950 ,16777215 ,16777215 ,16777215 ,
    198155 ,196614 ,1030 ,16777215 ,16777215 ,
    525835 ,525318 ,589825 ,16777215 ,16777215 ,
    590854 ,591363 ,590593 ,721670 ,16777215 ,
    395268 ,396040 ,133633 ,16777215 ,16777215 ,
    66058 ,196619 ,1547 ,1030 ,16777215 ,
    264968 ,263691 ,521 ,133641 ,16777215 ,
    657667 ,656130 ,590851 ,721670 ,263683 ,
    524803 ,525314 ,263682 ,16777215 ,16777215 ,
    1026 ,263682 ,16777215 ,16777215 ,16777215 ,
    67840 ,131844 ,132102 ,262920 ,16777215 ,
    67844 ,66562 ,132102 ,16777215 ,16777215 ,
    524547 ,525825 ,525318 ,395777 ,16777215 ,
    655616 ,655366 ,393220 ,16777215 ,16777215 ,
    263683 ,262920 ,395779 ,777 ,657667 ,
    657668 ,395780 ,16777215 ,16777215 ,16777215 ,
    264453 ,460299 ,16777215 ,16777215 ,16777215 ,
    2051 ,264453 ,722694 ,16777215 ,16777215 ,
    327681 ,328704 ,460299 ,16777215 ,16777215 ,
    722694 ,525060 ,197892 ,196869 ,16777215 ,
    591108 ,655618 ,460299 ,16777215 ,16777215 ,
    396039 ,66058 ,2051 ,264453 ,16777215 ,
    460299 ,328714 ,262666 ,262146 ,16777215 ,
    197640 ,197892 ,197125 ,656642 ,722694 ,
    459267 ,460290 ,328713 ,16777215 ,16777215 ,
    591108 ,2054 ,1538 ,395271 ,16777215 ,
    198146 ,198406 ,66816 ,328704 ,16777215 ,
    393736 ,395271 ,131336 ,264197 ,66824 ,
    591108 ,655622 ,67334 ,66311 ,16777215 ,
    67082 ,67334 ,65543 ,526080 ,591108 ,
    262154 ,264709 ,778 ,395783 ,198410 ,
    460298 ,461320 ,328714 ,264202 ,16777215 ,
    395525 ,396041 ,722953 ,16777215 ,16777215 ,
    198155 ,1539 ,1286 ,2309 ,16777215 ,
    2824 ,1291 ,261 ,329227 ,16777215 ,
    396035 ,393989 ,328449 ,16777215 ,16777215 ,
    66058 ,591115 ,592648 ,722182 ,16777215 ,
    2819 ,1547 ,2310 ,329225 ,66058 ,
    722949 ,722182 ,524293 ,656642 ,517 ,
    396035 ,393989 ,133635 ,656643 ,16777215 ,
    329737 ,328200 ,329218 ,198658 ,16777215 ,
    591110 ,591360 ,1538 ,16777215 ,16777215 ,
    66824 ,67584 ,329224 ,198658 ,393736 ,
    66822 ,131334 ,16777215 ,16777215 ,16777215 ,
    66310 ,67082 ,198662 ,329225 ,526598 ,
    655616 ,655366 ,591104 ,329216 ,16777215 ,
    776 ,329226 ,16777215 ,16777215 ,16777215 ,
    656646 ,16777215 ,16777215 ,16777215 ,16777215 ,
    722186 ,460043 ,16777215 ,16777215 ,16777215 ,
    722186 ,722693 ,525056 ,16777215 ,16777215 ,
    330503 ,330251 ,67840 ,16777215 ,16777215 ,
    657157 ,658183 ,591873 ,525057 ,16777215 ,
    721154 ,722689 ,460033 ,16777215 ,16777215 ,
    2051 ,66055 ,67333 ,459275 ,16777215 ,
    591621 ,590343 ,589826 ,133895 ,16777215 ,
    460034 ,459275 ,329986 ,197128 ,591874 ,
    132362 ,131845 ,198405 ,16777215 ,16777215 ,
    524800 ,525570 ,526085 ,655877 ,16777215 ,
    589825 ,330243 ,328455 ,199170 ,16777215 ,
    591874 ,590337 ,526082 ,655877 ,460034 ,
    66309 ,198405 ,16777215 ,16777215 ,16777215 ,
    2055 ,1793 ,67333 ,16777215 ,16777215 ,
    589827 ,590597 ,328455 ,16777215 ,16777215 ,
    591879 ,329991 ,16777215 ,16777215 ,16777215 ,
    329732 ,330248 ,658184 ,16777215 ,16777215 ,
    327684 ,330496 ,330251 ,721664 ,16777215 ,
    265 ,525322 ,526859 ,656389 ,16777215 ,
    658180 ,656389 ,721668 ,590849 ,196868 ,
    132353 ,133125 ,133896 ,263432 ,16777215 ,
    1035 ,2819 ,263435 ,133889 ,327947 ,
    517 ,1289 ,133893 ,263432 ,722949 ,
    590853 ,133891 ,16777215 ,16777215 ,16777215 ,
    132362 ,197890 ,197637 ,198660 ,16777215 ,
    330242 ,328196 ,262656 ,16777215 ,16777215 ,
    199170 ,197898 ,198661 ,263432 ,265 ,
    330242 ,328196 ,67842 ,590850 ,16777215 ,
    525317 ,525571 ,197889 ,16777215 ,16777215 ,
    1029 ,65541 ,16777215 ,16777215 ,16777215 ,
    525317 ,525571 ,589829 ,773 ,16777215 ,
    590853 ,16777215 ,16777215 ,16777215 ,16777215 ,
    264967 ,264459 ,592395 ,16777215 ,16777215 ,
    2051 ,264455 ,592647 ,592395 ,16777215 ,
    68107 ,68356 ,66560 ,459787 ,16777215 ,
    196868 ,197640 ,68100 ,459787 ,658180 ,
    264967 ,592644 ,590347 ,590082 ,16777215 ,
    591620 ,592647 ,590091 ,133889 ,2051 ,
    722692 ,721922 ,132096 ,16777215 ,16777215 ,
    722692 ,721922 ,525060 ,197124 ,16777215 ,
    133386 ,132873 ,131847 ,459785 ,16777215 ,
    592391 ,591620 ,655879 ,526080 ,131079 ,
    198410 ,199170 ,459786 ,68096 ,262154 ,
    68098 ,526084 ,16777215 ,16777215 ,16777215 ,
    264449 ,262407 ,459011 ,16777215 ,16777215 ,
    264449 ,262407 ,2049 ,526081 ,16777215 ,
    262147 ,459779 ,16777215 ,16777215 ,16777215 ,
    264199 ,16777215 ,16777215 ,16777215 ,16777215 ,
    592392 ,658184 ,16777215 ,16777215 ,16777215 ,
    196617 ,198923 ,723210 ,16777215 ,16777215 ,
    266 ,2568 ,526859 ,16777215 ,16777215 ,
    196874 ,721674 ,16777215 ,16777215 ,16777215 ,
    66059 ,68361 ,592648 ,16777215 ,16777215 ,
    196617 ,198923 ,66057 ,133897 ,16777215 ,
    523 ,524299 ,16777215 ,16777215 ,16777215 ,
    197131 ,16777215 ,16777215 ,16777215 ,16777215 ,
    131848 ,133130 ,657417 ,16777215 ,16777215 ,
    592386 ,2306 ,16777215 ,16777215 ,16777215 ,
    131848 ,133130 ,264 ,68104 ,16777215 ,
    68098 ,16777215 ,16777215 ,16777215 ,16777215 ,
    66312 ,590088 ,16777215 ,16777215 ,16777215 ,
    2305 ,16777215 ,16777215 ,16777215 ,16777215 ,
    776 ,16777215 ,16777215 ,16777215 ,16777215 ,
    16777215 ,16777215 ,16777215 ,16777215 ,16777215 
};

// Noise functions copied from https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83.

//	<https://www.shadertoy.com/view/4dS3Wd>
//	By Morgan McGuire @morgan3d, http://graphicscodex.com
//
float hash(float n) { return fract(sin(n) * 1e4); }
float hash(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }

float noise(float x) {
	float i = floor(x);
	float f = fract(x);
	float u = f * f * (3.0 - 2.0 * f);
	return mix(hash(i), hash(i + 1.0), u);
}

float noise(vec2 x) {
	vec2 i = floor(x);
	vec2 f = fract(x);

	// Four corners in 2D of a tile
	float a = hash(i);
	float b = hash(i + vec2(1.0, 0.0));
	float c = hash(i + vec2(0.0, 1.0));
	float d = hash(i + vec2(1.0, 1.0));

	// Simple 2D lerp using smoothstep envelope between the values.
	// return vec3(mix(mix(a, b, smoothstep(0.0, 1.0, f.x)),
	//			mix(c, d, smoothstep(0.0, 1.0, f.x)),
	//			smoothstep(0.0, 1.0, f.y)));

	// Same code, with the clamps in smoothstep and common subexpressions
	// optimized away.
	vec2 u = f * f * (3.0 - 2.0 * f);
	return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
}

// This one has non-ideal tiling properties that I'm still tuning
float noise(vec3 x) {
	const vec3 step = vec3(110, 241, 171);

	vec3 i = floor(x);
	vec3 f = fract(x);

	// For performance, compute the base input to a 1D hash from the integer part of the argument and the
	// incremental change to the 1D based on the 3D -> 1D wrapping
    float n = dot(i, step);

	vec3 u = f * f * (3.0 - 2.0 * f);
	return mix(mix(mix( hash(n + dot(step, vec3(0, 0, 0))), hash(n + dot(step, vec3(1, 0, 0))), u.x),
                   mix( hash(n + dot(step, vec3(0, 1, 0))), hash(n + dot(step, vec3(1, 1, 0))), u.x), u.y),
               mix(mix( hash(n + dot(step, vec3(0, 0, 1))), hash(n + dot(step, vec3(1, 0, 1))), u.x),
                   mix( hash(n + dot(step, vec3(0, 1, 1))), hash(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);
}

#define NUM_OCTAVES 5

float fbm(float x) {
	float v = 0.0;
	float a = 0.5;
	float shift = float(100);
	for (int i = 0; i < NUM_OCTAVES; ++i) {
		v += a * noise(x);
		x = x * 2.0 + shift;
		a *= 0.5;
	}
	return v;
}

float fbm(vec2 x) {
	float v = 0.0;
	float a = 0.5;
	vec2 shift = vec2(100);
	// Rotate to reduce axial bias
    mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.50));
	for (int i = 0; i < NUM_OCTAVES; ++i) {
		v += a * noise(x);
		x = rot * x * 2.0 + shift;
		a *= 0.5;
	}
	return v;
}


float fbm(vec3 x) {
	float v = 0.0;
	float a = 0.5;
	vec3 shift = vec3(100);
	for (int i = 0; i < NUM_OCTAVES; ++i) {
		v += a * noise(x);
		x = x * 2.0 + shift;
		a *= 0.5;
	}
	return v;
}

float calculate_density(vec3 v)
{
    //float noise = fbm(v);
    //float noise = noise(0.1 * v + vec3(0.0,0.01,0.043));
    //return v.y + abs(6*fbm(v*0.4)); // + 10.0 * noise + 14.0 * noise2;
    //return v.y - 1.5 + sin(0.03*v.x) * 5 * noise;
    return v.y - 1.5 + 2 * sin(v.x) + cos(0.5 * v.y);
}

int calculate_case(float d0, float d1, float d2, float d3, float d4, float d5, float d6, float d7, float isovalue)
{
  int result = 0;

  if (d0 < isovalue) { result += 128;}
  if (d1 < isovalue) { result += 64;}
  if (d2 < isovalue) { result += 32;}
  if (d3 < isovalue) { result += 16;}
  if (d4 < isovalue) { result += 8; }
  if (d5 < isovalue) { result += 4; }
  if (d6 < isovalue) { result += 2; }
  if (d7 < isovalue) { result += 1; }

  return result;
}

vec3 calculate_normal(vec3 pos)
{
  float d = 0.1;
  vec3 grad;
  float right = calculate_density(pos   + vec3(d, 0.0, 0.0));
  float left = calculate_density(pos    - vec3(d, 0.0, 0.0));
  float up = calculate_density(pos      + vec3(0.0, d, 0.0));
  float down = calculate_density(pos    - vec3(0.0, d, 0.0));
  float z_minus = calculate_density(pos + vec3(0.0, 0.0, d));
  float z = calculate_density(pos       - vec3(0.0, 0.0, d));
  grad.x = right - left;
  grad.y = up - down;
  grad.z = z - z_minus;
  return grad;
}

vec4 interpolateV(vec4 va, vec4 vb, float isovalue)
{
   #ifdef INTERPOLATE
     if (abs(isovalue - va.w) < 0.000001) { return vec4(va.xyz, 1.0); }
     else if (abs(isovalue - vb.w) < 0.000001) { return vec4(vb.xyz, 1.0); }
     else if (abs(va.w-vb.w) < 0.000001) { return vec4(va.xyz, 1.0); }
     
     else
     {
       vec4 p;
       double mu = (isovalue - va.w) / double((vb.w - va.w));
       p.x = float(double(va.x) + mu * double((vb.x - va.x)));
       p.y = float(double(va.y) + mu * double((vb.y - va.y)));
       p.z = float(double(va.z) + mu * double((vb.z - va.z)));
       p.w = 1.0f;
       return p;
     }
   #else
      return vec4(va.xyz, 1.0);
      //return (va+vb)/2.0f;
      //if (fabs(isovalue - va.w) >= fabs(isovalue - vb.w)) { return va; }
      //else return vb;
   #endif
}

vec4 interpolateN(vec4 na, vec4 nb, float densityA, float densityB, float isovalue)
{
   #ifdef INTERPOLATE
     if (abs(isovalue - densityA) < 0.000001) { return vec4(normalize(na.xyz), 0.0); }
     else if (abs(isovalue - densityB) < 0.000001) { return vec4(normalize(nb.xyz), 0.0);}
     else if (abs(densityA-densityB) < 0.000001) { return vec4(normalize(na.xyz), 0.0); }
     
     else
     {
       vec3 p;
       float mu = (isovalue - densityA) / (densityB - densityA);
       p.x = na.x + mu * (nb.x - na.x);
       p.y = na.y + mu * (nb.y - na.y);
       p.z = na.z + mu * (nb.z - na.z);
       return vec4(normalize(p), 0.0);
       //return normalize(p);
     }
   #else
      //return normalize((na+nb)/2.0f);
      return vec4(normalize(na.xyz), 0.0);
      //if (fabs(isovalue - densityA) >= fabs(isovalue - densityB)) { return na; }
      //else return nb;
   #endif
}

void createVertex(uint edgeValue, in Cube c,
                  uint arrayIndex,
                  float isovalue)
{
    Vertex v;
    // EDGE NUMBER 0
    if (edgeValue == 0)
    {
        v.v = interpolateV(c.v0,c.v1,isovalue);
        v.n = interpolateN(c.n0, c.n1, c.v0.w, c.v1.w, isovalue);
    }
    // EDGE NUMBER 1
    else if (edgeValue == 1)
    {
        v.v = interpolateV(c.v1,c.v2,isovalue);
        v.n = interpolateN(c.n1, c.n2, c.v1.w, c.v2.w, isovalue);
    }           
    // EDGE NUMBER 2
    else if (edgeValue == 2)
    {
        v.v = interpolateV(c.v2,c.v3,isovalue);
        v.n = interpolateN(c.n2, c.n3, c.v2.w, c.v3.w, isovalue);
    }           
    // EDGE NUMBER 3
    else if (edgeValue == 3)
    {
        v.v = interpolateV(c.v3,c.v0,isovalue);
        v.n = interpolateN(c.n3, c.n0, c.v3.w, c.v0.w, isovalue);
    }           
    // EDGE NUMBER 4
    else if (edgeValue == 4)
    {
        v.v = interpolateV(c.v4,c.v5,isovalue);
        v.n = interpolateN(c.n4, c.n5, c.v4.w, c.v5.w, isovalue);
    }           
    // EDGE NUMBER 5
    else if (edgeValue == 5)
    {
        v.v = interpolateV(c.v5,c.v6,isovalue);
        v.n = interpolateN(c.n5, c.n6, c.v5.w, c.v6.w, isovalue);
    }           
    // EDGE NUMBER 6
    else if (edgeValue == 6)
    {
        v.v = interpolateV(c.v6,c.v7,isovalue);
        v.n = interpolateN(c.n6, c.n7, c.v6.w, c.v7.w, isovalue);
    }           
    // EDGE NUMBER 7
    else if (edgeValue == 7)
    {
        v.v = interpolateV(c.v7,c.v4,isovalue);
        v.n = interpolateN(c.n7, c.n4, c.v7.w, c.v4.w, isovalue);
    }           
    // EDGE NUMBER 8
    else if (edgeValue == 8)
    {
        v.v = interpolateV(c.v0,c.v4,isovalue);
        v.n = interpolateN(c.n0, c.n4, c.v0.w, c.v4.w, isovalue);
    }           
    // EDGE NUMBER 9
    else if (edgeValue == 9)
    {
        v.v = interpolateV(c.v1,c.v5,isovalue);
        v.n = interpolateN(c.n1, c.n5, c.v1.w, c.v5.w, isovalue);
    }           
    // EDGE NUMBER 10 
    else if (edgeValue == 10)
    {
        v.v = interpolateV(c.v2,c.v6,isovalue) ;
        v.n = interpolateN(c.n2, c.n6, c.v2.w, c.v6.w, isovalue);
    }           
    // EDGE NUMBER 11 
    else if (edgeValue == 11)
    {
        v.v = interpolateV(c.v3,c.v7,isovalue);
        v.n = interpolateN(c.n3, c.n7, c.v3.w, c.v7.w, isovalue);
    }    
    else
    {
        v.v = vec4(0.0,0.0,0.0,1.0);
        //v.v = vec4(0.0,-150.0,0.0,1.0);
        v.n = vec4(666,555,777,666.666);

    }
    mc_out[arrayIndex] = v;
}

void main() {

    uint pos_x = gl_GlobalInvocationID.x;
    uint pos_y = gl_GlobalInvocationID.y;
    uint pos_z = gl_GlobalInvocationID.z;
    //atomicAdd(mc_counter.counter, 1);
    //float eki = density_values.values[0];

     //           uint ind2 = atomicAdd(mc_counter.counter, 1);
     //           output_buffer.mc_out[0] = 1;
     //           output_buffer.mc_out[4] = 6;

    float d = 0.1; // cube_length; //0.1;

    vec3 position = vec3(pos_x, pos_y, pos_z) * d - vec3(0.0, 1.0, 0.0);

    // Create cube corner coordinates. PHASE 1. 
    vec3 p0 = position;
    vec3 p1 = position + vec3(0.0 ,   d , 0.0);
    vec3 p2 = position + vec3(d   ,   d , 0.0);
    vec3 p3 = position + vec3(d   , 0.0 , 0.0);
    vec3 p4 = position + vec3(0.0 , 0.0 , d);
    vec3 p5 = position + vec3(0.0 ,   d , d);
    vec3 p6 = position + vec3(d   ,   d , d);
    vec3 p7 = position + vec3(d   , 0.0 , d);
    
    // PHASE 2.
    //vec4 v0 = vec4(p0, calculate_density(p0));  
    //vec4 v1 = vec4(p1, calculate_density(p1));  
    //vec4 v2 = vec4(p2, calculate_density(p2));  
    //vec4 v3 = vec4(p3, calculate_density(p3));  
    //vec4 v4 = vec4(p4, calculate_density(p4));  
    //vec4 v5 = vec4(p5, calculate_density(p5));  
    //vec4 v6 = vec4(p6, calculate_density(p6));  
    //vec4 v7 = vec4(p7, calculate_density(p7));  
    
    // Create the cube. (PHASE 1 + PHASE 2)
    Cube cube;
    cube.v0 = vec4(p0, calculate_density(p0));
    cube.v1 = vec4(p1, calculate_density(p1));
    cube.v2 = vec4(p2, calculate_density(p2));
    cube.v3 = vec4(p3, calculate_density(p3));
    cube.v4 = vec4(p4, calculate_density(p4));
    cube.v5 = vec4(p5, calculate_density(p5));
    cube.v6 = vec4(p6, calculate_density(p6));
    cube.v7 = vec4(p7, calculate_density(p7));

    float isovalue = 0.1;

    // Calculate the cube case number.
    int cube_case = calculate_case(
        cube.v0.w,
        cube.v1.w,
        cube.v2.w,
        cube.v3.w,
        cube.v4.w,
        cube.v5.w,
        cube.v6.w,
        cube.v7.w,
        isovalue
    );
  
    if (cube_case == 0 || cube_case == 255) return;

    cube.n0 = vec4(calculate_normal(p0), 0.0);
    cube.n1 = vec4(calculate_normal(p1), 0.0);
    cube.n2 = vec4(calculate_normal(p2), 0.0);
    cube.n3 = vec4(calculate_normal(p3), 0.0);
    cube.n4 = vec4(calculate_normal(p4), 0.0);
    cube.n5 = vec4(calculate_normal(p5), 0.0);
    cube.n6 = vec4(calculate_normal(p6), 0.0);
    cube.n7 = vec4(calculate_normal(p7), 0.0);

    uint index = atomicAdd(counter, 3);

    const uint OFFSET = 5;

    // 1. TRIANGLE
	
    uint base_index = triTable[cube_case * OFFSET];

    createVertex((base_index & 0xff0000) >> 16 , cube, index, isovalue);
    createVertex((base_index & 0xff00) >> 8, cube, index+1, isovalue);
    createVertex((base_index & 0xff), cube, index+2, isovalue);

    // 2. TRIANGLE

    base_index = triTable[cube_case * OFFSET + 1];

    if ((base_index & 0xff0000) >> 16 == 255) return;
  
    index = atomicAdd(counter,3);
  
    createVertex((base_index & 0xff0000) >> 16 , cube, index, isovalue);
    createVertex((base_index & 0xff00) >> 8, cube, index+1, isovalue);
    createVertex(base_index & 0xff, cube, index+2, isovalue);
  
    // 3. TRIANGLE

    base_index = triTable[cube_case * OFFSET + 2];

    if ((base_index & 0xff0000) >> 16 == 255) return;
  
    index = atomicAdd(counter,3);
  
    createVertex((base_index & 0xff0000) >> 16 , cube, index, isovalue);
    createVertex((base_index & 0xff00) >> 8, cube, index+1, isovalue);
    createVertex(base_index & 0xff, cube, index+2, isovalue);
    
    // 4. TRIANGLE

    base_index = triTable[cube_case * OFFSET + 3];

    if ((base_index & 0xff0000) >> 16 == 255) return;

    index = atomicAdd(counter,3);
  
    createVertex((base_index & 0xff0000) >> 16 , cube, index, isovalue);
    createVertex((base_index & 0xff00) >> 8, cube, index+1, isovalue);
    createVertex(base_index & 0xff, cube, index+2, isovalue);
  
    // 5. TRIANGLE

    base_index = triTable[cube_case * OFFSET + 4];

    if ((base_index & 0xff0000) >> 16  == 255) return;

    index = atomicAdd(counter,3);
  
    createVertex((base_index & 0xff0000) >> 16 , cube, index, isovalue);
    createVertex((base_index & 0xff00) >> 8, cube, index+1, isovalue);
    createVertex(base_index & 0xff, cube, index+2, isovalue);
}
